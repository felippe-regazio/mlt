import jwt from 'jsonwebtoken';

/**
 * This const defines the name to be used on the generated cookie that will store our JWT Tokens.
 * We gonna use tokens becase use Local Storage, despite being simpler, is potencialy unsecure.
 */
export const JWT_COOKIE_NAME = 'mlt';

/**
 * WARN:
 * 
 * Idealy this should be generated by a random hash generator and should be stored as ENV VAR.
 * But for this project we are avoiding use DOTENV just for fast deployment and easier setup
 * You can generate a new SECRET by runnin on node: require('crypto').randomBytes(64).toString('hex')
 */
export const JWT_SECRET = '09f26e402586e2faa8da4c98a35f1b20d6b033c6097befa8be3486a829587fe2f90a832bd3ff9d42710a4da095a2ce285b009f0c3730cd9b8e1af3eb84df6611';

/**
 * WARN:
 * 
 * The generated token should expire in a couple hours, but this would drive us to a token refresher.
 * To save time we will use a long-live generated token, so we avoid the needing of a refresher now
 * saving time and complexity for both backend and frontend applications (simple challange tradeoff).
 */
export function encodeJWT(data: object) {
  return jwt.sign(data, JWT_SECRET, { expiresIn: '30d' });
}

/**
 * Verify a token that was generated using the encodeJWT function. If the cookie has been successfuly
 * decoded, this function will return the provided data that was encoded.
 */
export function decodeJWT(token: string) {
  return new Promise(resolve => {
    jwt.verify(token, JWT_SECRET, (error: any, data: any) => {
      error && console.error(error);

      resolve({ error, data });
    });
  });
}